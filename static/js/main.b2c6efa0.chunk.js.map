{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","errorMessage","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","htmlFor","type","classNames","event","target","onBlur","DEFAULT_NEW_MOVIE","NewMovie","onAdd","urlRegex","RegExp","count","setCount","newMovie","setNewMovie","isUrlValid","url","test","normalizedMovie","trim","isImgUrlValid","isImdbUrlValid","onSubmit","preventDefault","handleSubmit","newTitle","newDescription","newImgUrl","newImdbUrl","newImdbId","disabled","isMovieValid","App","moviesFromServer","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b2c6efa0.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  errorMessage?: string | null\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n  errorMessage,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {(hasError || errorMessage) && (\n        <p className=\"help is-danger\">{errorMessage || (`${label} is required`)}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void,\n};\n\nconst DEFAULT_NEW_MOVIE: Movie = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n  imdbId: '',\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  // eslint-disable-next-line max-len\n  const urlPattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n  const urlRegex = new RegExp(urlPattern);\n\n  const [count, setCount] = useState(0);\n  const [newMovie, setNewMovie] = useState<Movie>({ ...DEFAULT_NEW_MOVIE });\n\n  const isUrlValid = (url: string) => urlRegex.test(url);\n\n  const normalizedMovie: Movie = {\n    title: newMovie.title.trim(),\n    description: newMovie.description.trim(),\n    imdbId: newMovie.imdbId.trim(),\n    imgUrl: newMovie.imgUrl.trim(),\n    imdbUrl: newMovie.imdbUrl.trim(),\n  };\n  const isImgUrlValid = normalizedMovie.imgUrl\n    ? isUrlValid(normalizedMovie.imgUrl)\n    : true;\n  const isImdbUrlValid = normalizedMovie.imdbUrl\n    ? isUrlValid(normalizedMovie.imdbUrl)\n    : true;\n\n  const isMovieValid = ({\n    title,\n    imdbId,\n    imdbUrl,\n    imgUrl,\n  }: Movie) => title\n  && imdbId\n  && isImdbUrlValid\n  && isImgUrlValid\n  && imdbUrl\n    && imgUrl;\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    onAdd(normalizedMovie);\n    setNewMovie(DEFAULT_NEW_MOVIE);\n    setCount(count + 1);\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={(event) => handleSubmit(event)}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={newMovie.title}\n        onChange={(newTitle) => setNewMovie({\n          ...newMovie,\n          title: newTitle,\n        })}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={newMovie.description}\n        onChange={(newDescription) => setNewMovie({\n          ...newMovie,\n          description: newDescription,\n        })}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={newMovie.imgUrl}\n        onChange={(newImgUrl) => setNewMovie({\n          ...newMovie,\n          imgUrl: newImgUrl,\n        })}\n        errorMessage={isImgUrlValid ? null : 'Image URL is not valid'}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={newMovie.imdbUrl}\n        onChange={(newImdbUrl) => setNewMovie({\n          ...newMovie,\n          imdbUrl: newImdbUrl,\n        })}\n        errorMessage={isImdbUrlValid ? null : 'Imdb URL is not valid'}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={newMovie.imdbId}\n        onChange={(newImdbId) => setNewMovie({\n          ...newMovie,\n          imdbId: newImdbId,\n        })}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!isMovieValid(normalizedMovie)}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={(movie) => setMovies([...movies, movie])} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}